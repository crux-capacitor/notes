# sample salt master config using gitfs and multiple environments

----------------------------------------------------------

# /etc/master.d/fileserver.conf
fileserver_backend:
  - roots
  - git

file_roots:
  base:
    - /srv/salt
  dev:
    - /srv/salt # its ok to map to the same directory
  prod:
    - /srv/salt

pillar_roots:
  base:
    - /srv/pillar
  dev:
    - /srv/pillar
  prod:
    - /srv/pillar

gitfs_remotes:
  - https://url/to/public/repo.git
  - git@url/to/private/repo.git 

gitfs_env_whitelist:
  - base # maps to master branch
  - dev  # add listing under file and pillar roots
  - prod # add listing under file and pillar roots

----------------------------------------------------------

# /srv/salt/top.sls
base:
  '*':
    - whatever
dev:
  'G@environment:dev': # or however you want to target them
    - whatever
prod:
  'G@environment:prod': # or however you want to target them
    - whatever

# manually set a grain like this:
salt S@10.1.0.0/16 grains.setval environment:dev
salt S@10.2.0.0/16 grains.setval environment:prod

----------------------------------------------------------

# create an SSH config file for the master to pull from the private Git repo
# /root/.ssh/config
Host private-gitlab
    Hostname private.gitlab.us
    User git
    StrictHostKeyChecking no
    IdentityFile /etc/salt/master.d/sshkey.priv # renamed to add .priv extension (not needed)
    IdentitiesOnly yes

salt-run fileserver.file_list will then call the configuration in the SSH config file to retrieve the fileserver

------------------------------------------------------------
Bootstrapping
------------------------------------------------------------

# Curl down the bootstrap script
curl -o bootstrap-salt.sh -L https://bootstrap.saltstack.com

# Execute boostrapper, examples:

# Master:
sudo sh bootstrap.sh -M stable 2018.3.2

# Minion:
sudo sh bootstrap.sh stable 2018.3.2 -i infra-hadoop -j "{"grains": {"roles": ["hadoop"]}}"
cat "salt <masters ip>" >> /etc/hosts

# Useful flags:
-i  Minion name 
-J  Pass salt master conf as JSON
-j  Pass salt minion conf as JSON (set grain role:<gluster|openshift|idam|hadoop>)
-N  Do not install salt minion
-M  Install salt master

# Example minion config setting roles grain:
{"grains": {"roles": ["hadoop"]}}
{"grains": {"role": "hadoop"}}

------------------------------------------------------------
Role-based State Top File Example
------------------------------------------------------------
{% set role = salt['grains.get']('role', 'None') %}
'G@role:{{ role }}':
  - match: compound
  - 'role.{{ role }}'

So then,
salt://role/{{ role }}/init.sls will be filled with includes of all needed states for that role

------------------------------------------------------------
Highstate Orchestration Example
------------------------------------------------------------

# salt://salt/reactor/auth-complete.sls
#
# Execute highstate via orchestrate runner.
# This allows for controlled execution of syncing grains, pillar, and then highstating
# and also allows the Reactor to get back to reacting.
orchestrate_highstate:
  runner.state.orchestrate:
    - args:
      - mods: orchestrate.minion_start
      - pillar:
          id: {{ data['id'] }}

# salt://salt/orchestrate/minion_start.sls
#
# Using orchestration allows us to ensure that the below functions
# are executed and complete in the defined order. This is important
# when the highstate relies on values gathered from grains and pillar.
# For a brand new minion, if grains and pillar are not populated, then the
# first highstate will fail. This is the solution for that.

# pillar is set in the reactor file
# salt://reactor/auth-complete.sls
{% set id = salt.pillar.get('id') %}

sync_grains:
  salt.function:
    - name: saltutil.sync_grains
    - tgt: {{ id }}

refresh_pillar:
  salt.function:
    - name: saltutil.refresh_pillar
    - tgt: {{ id }}

run_highstate:
  salt.state:
    - tgt: {{ id }}
    - highstate: True
   
-------------------------------------------------------------------
Get File List from Master Example
-------------------------------------------------------------------
{% set files = salt.cp.list_master(prefix='application/evolution/files/') %}

{% for file in files %}

Splitting example:
/home/{{ username }}/.config/evolution/sources/{{ file.split('/')[3] }}:

{% endfor %}
